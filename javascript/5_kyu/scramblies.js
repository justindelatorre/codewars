/* https://www.codewars.com/kata/55c04b4cc56a697bb0000048/train/ruby
 *
 * Write a function that returns true if a portion of characters from a given string
 * can be rearranged to match a second given string. Otherwise, return false.
 */

// INPUT(S)
// - (2) Strings:
//   - Source, representing a string whose substrings may be re-arranged to form the
//     second given string
//   - Target, representing a string to be generated by substrings from the first
//     given string
//
// OUTPUT(S)
// - Boolean, indicating if a substring of letters in the first given string can be re-arranged
//   to form the second given string
//
// REQUIREMENTS / NOTES
// 
//
// CLARIFICATIONS
// - Should the function be able to handle non-string data types? (No. Assume all cases will be strings.)
// - How should the function handle empty strings for either argument? (Return false.)
// - What individual characters can be expected in either argument? (Just letters.)
// - Does case matter? Hello > 'he' => true? (Case doesn't matter.) [TODO: Downcase arguments to stay 
//   consistent.]
//
// EXAMPLES
// console.log(canRearrange('steaks', 'teak')); // true
// console.log(canRearrange('example', 'max')); // true
// console.log(canRearrange('CodeWars', 'wear')); // true
// console.log(canRearrange('CodeWars', 'haxor')); // false
// console.log(canRearrange('steaks', '')); // false
// console.log(canRearrange('', 'exam')); // false
//
// DATA STRUCTURE(S)
// - Strings, since we're comparing strings
// - Arrays, which enable element sorting
//
// ALGORITHM
// - Guard Cases:
//   - Return false if either argument is an empty string
// - Step 1: Generate all possible substrings from first argument
//   - Initialize a variable and assign to an empty array to hold substrings
//   - Initialize an outer loop starting from 0 to less than length of argument
//     - Initialize an inner loop starting from 1 to less than or equal to length of argument
//       - If length of substring from index outer to index inner is > 1, push to target array
//   - Return substring target array
// - Step 2: Compare substrings to second argument and return any matches
//   - Loop through all substrings from first argument
//     - Compare each substring to the target:
//       - Split both the substring and the target and sort each resulting array. Join each
//         respectively and compare. Return true if they equal each other.
//   - Return false

function getSubstrings(string) {
  let substrings = [];
  for (let outer = 0; outer < string.length; outer += 1) {
    for (let inner = 1; inner < string.length; inner += 1) {
      let currentSubstring = string.slice(inner, outer + 2);
      if (currentSubstring.length > 1) {
        substrings.push(currentSubstring); 
      }
    }
  }
  
  return substrings;
}

function canRearrange(source, target) {
  if (source.length === 0 || target.length === 0) {
    return false; 
  }
  
  let substrings = getSubstrings(source.toLowerCase());
  let targetCharacters = target.toLowerCase().split('').sort().join('');
  for (let idx = 0; idx < substrings.length; idx += 1) {
    let substringCharacters = substrings[idx].split('').sort().join('');
    if (substringCharacters === targetCharacters) {
      return true; 
    }
  }
  
  return false;
}

// Generic Cases
console.log(canRearrange('steaks', 'teak')); // true
console.log(canRearrange('example', 'max')); // true
console.log(canRearrange('CodeWars', 'wear')); // true
console.log(canRearrange('CodeWars', 'haxor')); // false
console.log(canRearrange('steaks', '')); // false
console.log(canRearrange('', 'exam')); // false
